# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VjOKGa6YJqYGxkMgAz8Uo3viJdeBLxQh
"""

import pandas as pd
import numpy as np

movies_df = pd.read_csv('/content/movies.csv',dtype={'movieId': 'int32', 'title': 'str'})
rating_df=pd.read_csv('/content/ratings.csv',usecols=['userId', 'movieId', 'rating'])

movies_df.head()

rating_df.head()

df = pd.merge(rating_df,movies_df,on='movieId')
df.head()

combine_movie_rating = df.dropna(axis = 0, subset = ['title'])
movie_ratingCount = (combine_movie_rating.
     groupby(by = ['title'])['rating'].
     count().
     reset_index().
     rename(columns = {'rating': 'totalRatingCount'})
     [['title', 'totalRatingCount']]
    )
movie_ratingCount.head()

rating_with_totalRatingCount = combine_movie_rating.merge(movie_ratingCount, left_on = 'title', right_on = 'title', how = 'left')
rating_with_totalRatingCount.head()

pd.set_option('display.float_format', lambda x: '%.3f' % x)
print(movie_ratingCount['totalRatingCount'].describe())

popularity_threshold = 50
rating_popular_movie= rating_with_totalRatingCount.query('totalRatingCount >= @popularity_threshold')
rating_popular_movie.head()

rating_popular_movie.shape

movie_features_df=rating_popular_movie.pivot_table(index='title',columns='userId',values='rating').fillna(0)
movie_features_df.head()

"""K NEAREST neighbourS """

from scipy.sparse import csr_matrix

movie_features_df_matrix = csr_matrix(movie_features_df.values)

from sklearn.neighbors import NearestNeighbors


model_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model_knn.fit(movie_features_df_matrix)

# Commented out IPython magic to ensure Python compatibility.
'''
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

plt.figure()
sns.pairplot(movie_features_df)
plt.show()
'''

movie_features_df.shape

query_index = np.random.choice(movie_features_df.shape[0])
print(query_index)
query_index =2

distances, indices = model_knn.kneighbors(movie_features_df.iloc[query_index,:].values.reshape(1, -1), n_neighbors = 6)

movie_features_df.head()

for i in range(0, len(distances.flatten())):
    if i == 0:
        print('Recommendations for {0}:\n'.format(movie_features_df.index[query_index]))
    else:
        print('{0}: {1}, with distance of {2}:'.format(i, movie_features_df.index[indices.flatten()[i]], distances.flatten()[i]))

"""

> k means

"""

import numpy as np
import pandas as pd
from factor_analyzer import FactorAnalyzer
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn import metrics
import random

data1 = pd.read_csv('movies.csv')
data2 = pd.read_csv('ratings.csv')

data1.head()

data2.head()

data = pd.merge(data2 , data1 , how='outer', on='movieId')

data.head()

x = data.genres
a = list()
for i in x:
    abc = i
    a.append(abc.split('|'))
a = pd.DataFrame(a)   
b = a[0].unique()
for i in b:
    data[i] = 0
data.head(2)

for i in b:
    data.loc[data['genres'].str.contains(i), i] = 1

data.head(2)

data = data.drop(['genres','title','timestamp'],axis =1)
data.head()

data.columns

data.isnull().sum()

data.dropna(inplace= True )

data.isnull().sum()

data.shape

'''
#By different meathods I found 8 cluster are better 
kmeanModel = KMeans(n_clusters=8)
kmeanModel.fit(data)
'''
#kmeans = KMeans(n_clusters=5)
Nc = range(1, 20)
kmeans = [KMeans(n_clusters=i) for i in Nc]
score = [kmeans[i].fit(data).score(data) for i in range(len(kmeans))]
pl.plot(Nc,score)
pl.xlabel('Number of Clusters')
pl.ylabel('Score')
pl.title('Elbow Curve')
fig1 = plt.gcf()
fig1.savefig(str('Elbow_Curve++.jpg'), format='jpg', dpi=800)
plt.clf()

kmeanModel = KMeans(n_clusters=8)
kmeanModel.fit(data)

# Creating an extra column in data for storing the cluster values
data['Cluster'] = kmeanModel.labels_
data['Cluster'].sample(n=10)

import seaborn as sns
import matplotlib.pyplot as plt
sns.scatterplot(data['movieId'], data['Cluster'] , s = 7, hue=data['Cluster'], label = '')
plt.show()

#!pip install scikit-learn-extra
from sklearn_extra.cluster import KMedoids
mked=KMedoids(n_clusters=8)
predictions2 = mked.fit_predict(data)

import seaborn as sns
import matplotlib.pyplot as plt
sns.scatterplot(data['movieId'], predictions2 , s = 7, hue=data['Cluster'], label = '')
plt.show()

